"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[435],{3905:(e,a,i)=>{i.d(a,{Zo:()=>d,kt:()=>k});var n=i(7294);function r(e,a,i){return a in e?Object.defineProperty(e,a,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[a]=i,e}function o(e,a){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),i.push.apply(i,n)}return i}function t(e){for(var a=1;a<arguments.length;a++){var i=null!=arguments[a]?arguments[a]:{};a%2?o(Object(i),!0).forEach((function(a){r(e,a,i[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(i,a))}))}return e}function s(e,a){if(null==e)return{};var i,n,r=function(e,a){if(null==e)return{};var i,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)i=o[n],a.indexOf(i)>=0||(r[i]=e[i]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)i=o[n],a.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var l=n.createContext({}),c=function(e){var a=n.useContext(l),i=a;return e&&(i="function"==typeof e?e(a):t(t({},a),e)),i},d=function(e){var a=c(e.components);return n.createElement(l.Provider,{value:a},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var i=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(i),m=r,k=u["".concat(l,".").concat(m)]||u[m]||p[m]||o;return i?n.createElement(k,t(t({ref:a},d),{},{components:i})):n.createElement(k,t({ref:a},d))}));function k(e,a){var i=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=i.length,t=new Array(o);t[0]=m;var s={};for(var l in a)hasOwnProperty.call(a,l)&&(s[l]=a[l]);s.originalType=e,s[u]="string"==typeof e?e:r,t[1]=s;for(var c=2;c<o;c++)t[c]=i[c];return n.createElement.apply(null,t)}return n.createElement.apply(null,i)}m.displayName="MDXCreateElement"},7666:(e,a,i)=>{i.r(a),i.d(a,{assets:()=>l,contentTitle:()=>t,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=i(7462),r=(i(7294),i(3905));const o={},t="Principios de dise\xf1o en AWS",s={unversionedId:"aws-certified-cloud-practitioner/conceptos-de-la-nube/principios-de-dise\xf1o/principios-de-dise\xf1o",id:"aws-certified-cloud-practitioner/conceptos-de-la-nube/principios-de-dise\xf1o/principios-de-dise\xf1o",title:"Principios de dise\xf1o en AWS",description:"\u274c Dise\xf1o preparado para fallas",source:"@site/docs-apuntes/aws-certified-cloud-practitioner/1-conceptos-de-la-nube/4-principios-de-dise\xf1o/4-principios-de-dise\xf1o.md",sourceDirName:"aws-certified-cloud-practitioner/1-conceptos-de-la-nube/4-principios-de-dise\xf1o",slug:"/aws-certified-cloud-practitioner/conceptos-de-la-nube/principios-de-dise\xf1o/",permalink:"/blog-personal/docs-apuntes/aws-certified-cloud-practitioner/conceptos-de-la-nube/principios-de-dise\xf1o/",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Econom\xeda de la nube de AWS",permalink:"/blog-personal/docs-apuntes/aws-certified-cloud-practitioner/conceptos-de-la-nube/economia-de-aws/"}},l={},c=[{value:"\u274c Dise\xf1o preparado para fallas",id:"-dise\xf1o-preparado-para-fallas",level:2},{value:"Microservicios",id:"microservicios",level:3},{value:"\ud83c\udfdb Desacoplar componentes en comparaci\xf3n con la arquitectura monol\xedtica",id:"-desacoplar-componentes-en-comparaci\xf3n-con-la-arquitectura-monol\xedtica",level:2},{value:"De un monolito a microservicios",id:"de-un-monolito-a-microservicios",level:3},{value:"\ud83e\udd38\ud83c\udffd Implementar elasticidad en la nube o en las instalaciones",id:"-implementar-elasticidad-en-la-nube-o-en-las-instalaciones",level:2},{value:"\ud83c\udf10 Pensar en paralelo",id:"-pensar-en-paralelo",level:2},{value:"Recursos",id:"recursos",level:2}],d={toc:c},u="wrapper";function p(e){let{components:a,...i}=e;return(0,r.kt)(u,(0,n.Z)({},d,i,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"principios-de-dise\xf1o-en-aws"},"Principios de dise\xf1o en AWS"),(0,r.kt)("h2",{id:"-dise\xf1o-preparado-para-fallas"},"\u274c Dise\xf1o preparado para fallas"),(0,r.kt)("hr",null),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},'"Everything fails, all the time" - Werner Vogels (AWS CTO)')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},'"Designing for failure also means testing the design and watching services cope with deteriorating conditions."  - AWS Documentation')),(0,r.kt)("p",null,"Este prinpcio indica que se debe disponer de una arquitectura que anticipe las posibles fallas. Para ello es necesario identificar posibles fuentes de falla para que puedan eliminarse o mitigarse. As\xed tambi\xe9n, se debe establecer procedimientos de respuesta ante un fallo para que los servicios sigan estando disponibles o tengan el menor impacto posible."),(0,r.kt)("h3",{id:"microservicios"},"Microservicios"),(0,r.kt)("p",null,"El uso de contenedores en microservicios permite que cada servicio pueda ser ejecutado en un entorno aislado y seguro, ayudando a prevenir conlfictos y el riesgo de interrupciones de los servicios. AWS ofrece diferentes opciones para microservicios con contenedores como ",(0,r.kt)("inlineCode",{parentName:"p"},"Amazon Elastic Container Service (ECS)")," y ",(0,r.kt)("inlineCode",{parentName:"p"},"AWS Lambda"),". De modo que, el dise\xf1o preparado a fallas es un aspecto importante dentro del mundo de microservicios con contenedores puesto que si un conjunto de contenedores falla mientras se le asigna la tarea de brindar un servicio, estos contenedores deben volver a crear instancias autom\xe1ticamente y sin demora."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"The Twelve-Factor App"),(0,r.kt)("p",null,'Seg\xfan sus autores es una "metodolog\xeda" que est\xe1 dise\xf1ada para ayudar a los desarrolladores a crear aplicaciones que sean escalables, port\xe1tiles y f\xe1ciles de mantener en cualquier entorno de alojamiento. Los doce factores son:'),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"C\xf3digo base:")," Utilizar un sistema de control de versiones para mantener una sola fuente de verdad para el c\xf3digo base de la aplicaci\xf3n."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Dependencias:")," Aislar las dependencias de la aplicaci\xf3n del sistema operativo subyacente y del entorno de alojamiento."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Configuraci\xf3n:")," Almacenar la configuraci\xf3n de la aplicaci\xf3n en variables de entorno para que se puedan cambiar f\xe1cilmente sin necesidad de cambiar el c\xf3digo."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Servicios de respaldo:")," Tratar los servicios de respaldo (bases de datos, colas de mensajes, etc.) como recursos adjuntos que se pueden conectar y desconectar sin afectar la aplicaci\xf3n."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Construcci\xf3n, publicaci\xf3n, ejecuci\xf3n:")," Separar la construcci\xf3n y publicaci\xf3n de la aplicaci\xf3n de su ejecuci\xf3n para que se puedan cambiar f\xe1cilmente."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Procesos:")," Ejecutar la aplicaci\xf3n como uno o m\xe1s procesos sin estado que pueden ser escalados horizontalmente."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Enlazar los puertos:")," Exponer servicios a trav\xe9s de un puerto y enlazarlos din\xe1micamente a la aplicaci\xf3n."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Concurrency:")," Escalar horizontalmente procesos de aplicaci\xf3n en lugar de escalar verticalmente para aprovechar mejor los recursos de hardware."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Desechabilidad:")," Tratar los procesos de aplicaci\xf3n como entidades ef\xedmeras que pueden ser destruidas y recreadas f\xe1cilmente."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Paridad de entorno:")," Mantener la paridad entre los entornos de desarrollo, prueba y producci\xf3n para reducir la posibilidad de problemas relacionados con las diferencias entre ellos."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Registros:")," Tratar los registros como eventos que fluyen a trav\xe9s de la aplicaci\xf3n, sin escribirlos en archivos de registro directamente."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Administraci\xf3n de procesos:")," Ejecutar tareas de administraci\xf3n y mantenimiento de procesos como procesos \xfanicos y separados de los procesos de la aplicaci\xf3n.")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Los factores claves relacionados al dise\xf1o para el fracaso para microservicios son:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Desechabilidad:")," es necesario producir im\xe1genes de contenedores eficientes y buscar procesos que puedan iniciarse y detenerse en cuesti\xf3n de segundos.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Registros:")," se de debe tratar los registros como flujos de eventos. Si falla parte de un sistema, es necesario solucionar el problema y asegurarse de que exista material para un an\xe1lisis forense.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Paridad de entorno:")," se debe mantener el desarrollo, ",(0,r.kt)("em",{parentName:"p"},"staging")," y la producci\xf3n lo m\xe1s similares posible."))))),(0,r.kt)("details",{open:!0},(0,r.kt)("summary",null,"Circuit breaker"),(0,r.kt)("p",null,"Un circuit breaker es un patr\xf3n de dise\xf1o que se utiliza para mejorar la resiliencia de las aplicaciones en una arquitectura distribuida. El objetivo principal de un circuit breaker es prevenir que una falla en un servicio afecte completamente en todo el sistema. Para ello, un circuit breaker monitorea constantemente la respuesta de un servicio y establece un umbral de tolerancia para determinar si el servicio funciona o ha fallado. Algunos circuit breakers populares son:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://resilience4j.readme.io/docs"},"Resilience4j")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/Netflix/Hystrix"},"Hystrix")))),(0,r.kt)("h2",{id:"-desacoplar-componentes-en-comparaci\xf3n-con-la-arquitectura-monol\xedtica"},"\ud83c\udfdb Desacoplar componentes en comparaci\xf3n con la arquitectura monol\xedtica"),(0,r.kt)("hr",null),(0,r.kt)("center",null,(0,r.kt)("img",{src:"https://d1.awsstatic.com/Developer%20Marketing/containers/monolith_1-monolith-microservices.70b547e30e30b013051d58a93a6e35e77408a2a8.png"})),(0,r.kt)("p",null,"En las arquitecturas monol\xedticas todos los procesos est\xe1n integrados y funcionan como un \xfanico servicio interrelacionado. Algunos ejemplos de aplicaciones comunes con artquitecturas monol\xedticas son:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Los sistemas de gesti\xf3n empresarial (ERP)"),(0,r.kt)("li",{parentName:"ul"},"Los sistemas de gesti\xf3n de relaciones con clientes (CRM)"),(0,r.kt)("li",{parentName:"ul"},"Los sistemas de gesti\xf3n de contenidos (CMS) ")),(0,r.kt)("p",null,"Por otro lado, las arquitecturas monol\xedticas tienen algunas desventajas importantes como:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"La integraci\xf3n de todas las funcionalidades en una sola unidad puede resultar en un acoplamiento estrecho que dificulta la implementaci\xf3n de nuevas caracter\xedsticas y mejoras."),(0,r.kt)("li",{parentName:"ul"},"La escalabilidad puede ser un problema, ya que es dif\xedcil escalar un solo componente sin afectar a todo el sistema. Tambi\xe9n hay una mayor probabilidad de acumulaci\xf3n de deuda t\xe9cnica a medida que el sistema crece y evoluciona."),(0,r.kt)("li",{parentName:"ul"},"La implementaci\xf3n de pruebas automatizadas y la actualizaci\xf3n de herramientas y tecnolog\xedas pueden ser un desaf\xedo en un sistema monol\xedtico. "),(0,r.kt)("li",{parentName:"ul"},"El mantenimiento del sistema puede ser m\xe1s complicado y costoso debido a la necesidad de actualizar todo el sistema en lugar de partes individuales. "),(0,r.kt)("li",{parentName:"ul"},"Si un proceso de una aplicaci\xf3n experimenta un pico de demanda, se debe escalar toda la arquitectura. "),(0,r.kt)("li",{parentName:"ul"},"Si un componente de una aplicaci\xf3n experimenta un aumento repentino en la demanda en una arquitectura monol\xedtica es necesario escalar todo el sistema para manejar la carga adicional.")),(0,r.kt)("h3",{id:"de-un-monolito-a-microservicios"},"De un monolito a microservicios"),(0,r.kt)("p",null,"A diferencia de un monol\xedtico el uso de una arquitectura de microservicios permite que cada servicio sea un componente individual al cual se le pueda desarrollar, operar, escalar y mantener sin afectar el funcionamiento de otros servicios. Cada servicio tiene una responsabilidad \xfanica o resuelve un problema espec\xedfico, y en caso de aumentar su complejidad puede divirse en servicios m\xe1s peque\xf1os. Todos estos servicios que en conjunto componen un sistema se comunican entre si a trav\xe9s de APIs."),(0,r.kt)("admonition",{title:"Kafka",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"En una arquitectura de microservicios, ",(0,r.kt)("a",{parentName:"p",href:"https://kafka.apache.org/"},"Apache Kafka")," se puede utilizar para enviar mensajes entre los distintos servicios de la aplicaci\xf3n. Cada servicio puede publicar eventos en Kafka cuando se produce un cambio en su estado, y otros servicios pueden suscribirse a esos eventos para recibir actualizaciones en tiempo real.")),(0,r.kt)("p",null,"Algunos de los beneficios m\xe1s relevantes seg\xfan AWS del utilizar una arquitectura de mircoservicios son que:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Fomentan la agilidad ya que los equipos trabajan en un contexto peque\xf1o y est\xe1n facultados a trabajar de forma m\xe1s independiente y r\xe1pida."),(0,r.kt)("li",{parentName:"ul"},"Permiten la integraci\xf3n y entrega continua lo cual facilita la acutalizaci\xf3n de c\xf3gido y el poder a\xf1adir nuevos ",(0,r.kt)("em",{parentName:"li"},"features")," comerciales."),(0,r.kt)("li",{parentName:"ul"},"Permiten un escalado flexible para satisfacer la gran demanda de uno o m\xe1s servicios para que est\xe9n totalmente disponibles."),(0,r.kt)("li",{parentName:"ul"},"Proporcionan componentes que pueden ser reutilizables para diferentes prop\xf3sitos o proyectos sin escribir nuevamente desde cero c\xf3digo.")),(0,r.kt)("p",null,'Libertad tecnol\xf3gica\nLas arquitecturas de microservicios no siguen un enfoque de "dise\xf1o \xfanico". Los equipos tienen la libertad de elegir la mejor herramienta para resolver sus problemas espec\xedficos. Como consecuencia, los equipos que crean microservicios pueden elegir la mejor herramienta para cada trabajo.'),(0,r.kt)("p",null,"Resistencia\nLa independencia del servicio aumenta la resistencia de una aplicaci\xf3n a los errores. En una arquitectura monol\xedtica, un error en un solo componente, puede provocar un error en toda la aplicaci\xf3n. Con los microservicios, si hay un error en todo el servicio, las aplicaciones lo manejan degradando la funcionalidad sin bloquear toda la aplicaci\xf3n."),(0,r.kt)("h2",{id:"-implementar-elasticidad-en-la-nube-o-en-las-instalaciones"},"\ud83e\udd38\ud83c\udffd Implementar elasticidad en la nube o en las instalaciones"),(0,r.kt)("hr",null),(0,r.kt)("admonition",{title:"Elasticidad",type:"info"},(0,r.kt)("blockquote",{parentName:"admonition"},(0,r.kt)("p",{parentName:"blockquote"},"The ability to acquire resources as you need them and release resources when you no longer need them. In the cloud, you want to do this automatically. - AWS Documentation"))),(0,r.kt)("p",null,"Seg\xfan AWS se debe considerar lo siguiente para implementar elasticidad en una infraestructura TI:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Identificar las cargas de trabajo que tienen carga variable."),(0,r.kt)("li",{parentName:"ul"},"Identificar el rango de carga de la carga de trabajo para justificar la adici\xf3n o eliminaci\xf3n de recursos."),(0,r.kt)("li",{parentName:"ul"},"Identificar las limitaciones de la aplicaci\xf3n que pueden limitar la elasticidad."),(0,r.kt)("li",{parentName:"ul"},"Identificar si el aumento de la demanda se puede cubrir con un escalado autom\xe1tico."),(0,r.kt)("li",{parentName:"ul"},"Identificar aplicaciones que pueden usar Amazon Athena o Amazon Aurora Serverless."),(0,r.kt)("li",{parentName:"ul"},"Implementar la elasticidad mediante ",(0,r.kt)("inlineCode",{parentName:"li"},"AWS Auto Scaling")," o ",(0,r.kt)("inlineCode",{parentName:"li"},"Application Auto Scaling")," para los aspectos de su servicio que no son el\xe1sticos por dise\xf1o."),(0,r.kt)("li",{parentName:"ul"},"Probar la elasticidad tanto hacia arriba como hacia abajo, asegur\xe1ndose de que cumpla con los requisitos de variaci\xf3n de carga.")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Amazon Athena & Amazon Aurora Serverless"),(0,r.kt)("p",null,"Amazon Athena es un servicio de consultas interactivas en la nube que permite analizar grandes cantidades de datos almacenados en Amazon S3 utilizando SQL. Por otro lado, Amazon Aurora Serverless es una base de datos relacional en la nube que se escala autom\xe1ticamente en funci\xf3n de la demanda sin necesidad de gesti\xf3n de servidores. Ambos servicios son el\xe1sticos porque se ajustan autom\xe1ticamente a la cantidad de recursos necesarios para satisfacer las demandas de procesamiento y almacenamiento de datos, permitiendo a los usuarios escalar sus operaciones de manera eficiente y rentable.")),(0,r.kt)("h2",{id:"-pensar-en-paralelo"},"\ud83c\udf10 Pensar en paralelo"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"El procesamiento secuencial puede llegar ser limitante en sistemas complejos ya que podr\xedan producir bloqueos o si existe una falla esta podr\xeda significar una falla para todo el sistema. Por lo que pensar en paralelo significa dividir el trabajo en su forma m\xe1s simple y luego distribuir esa carga a m\xfaltiples componentes para manejar la demanda y la complejidad. Un ejemplo en el cual se aplica este principio son los balanceadores de carga que permiten realizar un procesamiento paralelo enviando diferentes cargas de trabajo a diferentes instancias o servicios."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Traefik"),"Traefik es un balanceador de carga y proxy inverso que facilita la implementaci\xf3n de microservicios y equilibra la carga de las solicitudes entre varias instancias. Cada servicio tiene un balanceador de carga, incluso si solo hay un servidor al que reenviar el tr\xe1fico.",(0,r.kt)("br",null),(0,r.kt)("img",{src:"https://doc.traefik.io/traefik/assets/img/architecture-overview.png",atl:"Diagrama de load balancer de traefik"})),(0,r.kt)("h2",{id:"recursos"},"Recursos"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.coursera.org/learn/cloud-practitioner-exam-prep/home/week/1"},"Exam Prep: AWS Certified Cloud Practitioner Course")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.aws.amazon.com/pdfs/whitepapers/latest/running-containerized-microservices/running-containerized-microservices.pdf#design-for-failure"},"Running Containerized Microservices on AWS - AWS Whitepaper")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://12factor.net/"},"The Twelve-Factor App - Official documentation")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://kafka.apache.org/"},"Sitio oficial de Apache Kafka")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://wa.aws.amazon.com/wat.concept.elasticity.en.html"},"Elasticity - AWS Well-Architected Framework")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://doc.traefik.io/traefik/"},"Traefik Proxy Documentation"))))}p.isMDXComponent=!0}}]);